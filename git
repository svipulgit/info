# arista workflow:
git a create -c -n gt1 svipul.gt1.0 -b BgpCommon -b ArBgp; a4c shell gt1

git checkout -b mybranch master
git checkout master
git reset --hard HEAD^
git checkout mybranch
git checkout --ours -- *.c (or file name)

git a branchpackage <pkg-name>
git a update
git rebase master
git rebase -i master # if there are multiple commits
(
pick commit 1
squash commit 2
squash commit 3
)
git rebase -X theirs master

# reapply stashed change
git stash pop

git stash show -p
git stash show -p stash@{0}

# Revert the most recent stash
git stash show -p | git apply -R

# Revert diff in working tree
git checkout -p <file name>

# porting a change to new branch
git checkout -b newbranch
git cherry-pick <commit id>
git cherry-pick --abort

# show content of commit
git show <COMMIT>
git diff <COMMIT>~ <COMMIT>

# diff since beginning (git checkout)
git diff origin/master...

# ???
git reflog

# applying patch
https://mijingo.com/blog/creating-and-applying-patch-files-in-git

git add .
git commit
git a review

git a lint

git a push ( git a prepchange /  git a submit -c <cl> )
git a mutrev

# initial config
git config --global user.name svipul
git config --global user.email svipul@arista.com

git config --global user.name svipulgit
git config --global user.email svipul@gmail.com

# Move the notes along with changes from one container to another:
git notes --ref refs/notes/gitar-v1 show # show them in the first repo's HEAD
git notes --ref refs/notes/gitar-v1 edit # add them to the second repo's HEAD


# squash two p4 commits to one
# assuming git log looks like this  A - B(master, feature) - C(amend)
git checkout master~1
git checkout -b review
git cherry-pick feature
git cherry-pick amend
git rebase -i HEAD~2    ; squash the two commits to one
git a review -r <review-id>
git checkout amend
git a push




# SSH setup
# https://help.github.com/articles/connecting-to-github-with-ssh/
ssh-keygen -t rsa -b 4096 -C sv@
eval "$(ssh-agent -s)"
ssh-add -k ~/.ssh/id_rsa

git clone git@github.com:svipulgit/info.git

git config -l

# â€¦or create a new repository on the command line

# non-arista.........
echo "# helloTest" >> README.md
git init
git add .
git commit -a -m "first commit"
git remote add origin https://github.com/svipulgit/helloTest.git
git remote add origin git@github.com:svipulgit/googlescripts.git
git push -u origin master
git pull


# Aliases
alias.s=status
alias.a=!git add . && git status
alias.au=!git add -u . && git status
alias.aa=!git add . && git add -u . && git status
alias.c=commit
alias.cm=commit -m
alias.ca=commit --amend
alias.ac=!git add . && git commit
alias.acm=!git add . && git commit -m
alias gitl="git log --pretty='%Cblue%d %Cgreen%h %Creset%s' --graph --date-order --branches"
alias.l=log --graph --all --pretty=format:'%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset'
alias.ll=log --stat --abbrev-commit
alias.lg=log --color --graph --pretty=format:'%C(bold white)%h%Creset -%C(bold green)%d%Creset %s %C(bold green)(%cr)%Creset %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
alias.llg=log --color --graph --pretty=format:'%C(bold white)%H %d%Creset%n%s%n%+b%C(bold blue)%an <%ae>%Creset %C(bold green)%cr (%ci)' --abbrev-commit
alias.d=diff
alias.master=checkout master
alias.spull=svn rebase
alias.spush=svn dcommit
alias.alias=!git config --list | grep 'alias\.' | sed 's/alias\.\([^=]*\)=\(.*\)/\1\     => \2/' | sort

========== flamegraph steps from Mayukh ========
1. Art perf [dut] configure
2. Art perf start won't work because of the pidof bug, so manually run perf:
Check that no perf process is running, if so manually kill it
sudo bash -c 'nohup perf record -g -p 5064 -o /tmp/perf.data &
3. Art perf [dut] stop --> This should be fine, once perf is actually running pidof returns the correct pid
4. Generate the report:
Art perf [dut] report
5. Generate the flamegraph:
Art perf [dut] flamegraph
=================== Running flamegrapth on dut ==========
a4 yum install FlameGraph
Art perf [dut] configure ====> If this fails or does not run, do the steps under [1] instead
Art perf [dut] start -p processname
<run experiment>
Art perf [dut] stop

top -b -p `pidof Bgp`

cd /tmp/perf on the buildserver
perf script | /src/BgpCommon/test/PerfDemangle.py | /usr/bin/FlameGraph/stackcollapse-perf.pl > /tmp/out.perf-folded
/usr/bin/FlameGraph/flamegraph.pl /tmp/out.perf-folded > /tmp/perf.svg
============================

[1] if the Art perf configure failes, 
   - You can download "Perl.swix" and "Perf.swix" from dist (corresponding to your image). 

Internal build ID:      d75e4742-83ef-401e-bb44-51c0bcd3d9f9
a4 rpmrepo --serial=d75e4742-83ef-401e-bb44-51c0bcd3d9f9
wget http://dist/Abuild/eos-trunk/i386_18/5831863/images/Perl.swix

   -  Lets say the swix files are in /tmp
   - unzip Perl.swix
   - sudo rpm -ivh /tmp/*.rpm
   - rm /tmp/*.rpm
   - unzip Perf.swix
   - sudo rpm -ivh /tmp/*.rpm
   - rm /tmp/*.rpm

sudo -b bash -c 'nohup perf record -g -p 3932 -o /tmp/perf/out1 &>nohup.out &'
sudo kill -SIGINT <pidof perf>

/tmp/perf/perf.data
perf script > perfScript

/usr/bin/FlameGraph/stackcollapse-perf.pl < perfScript > perfCollapse

c++filt < perfCollapse > perfDemangled

/usr/bin/FlameGraph/flamegraph.pl perfDemangled > perf.svg


perf script | /src/BgpCommon/test/PerfDemangle.py | ~/FlameGraph/stackcollapse-perf.pl > /tmp/out.perf-folded.20170808_074420
/usr/bin/FlameGraph/flamegraph.pl /tmp/out.perf-folded.20170808_074420 > /tmp/perf-20170808_074420.svg

======================== Running with stest ================

Instead of perfConfigure, run following

a4 yum install -y --enablerepo=* EosKernel-perf EosKernel-debug tacc-debuginfo gcc-debuginfo glibc-debuginfo FlameGraph EosExtras

--- //src/BgpCommon/venkit.mrt.3/test/BgpGaTTbgpTests.py	#5
+++ src/BgpCommon/test/BgpGaTTbgpTests.py	2017-09-26 17:45:12.976243334 -0700
@@ -33,6 +33,7 @@
 import Netns
 from BenchmarkDb import BenchmarkSession
 import os
+import ArosTest.ArtCommands.Perf as Perf
 
 __defaultTraceHandle__ = Tracing.Handle( "BgpGaTTbgpTests" )
 ArosTest.desiredTracingIs( "BgpGaTTbgpTests/0" )
@@ -2135,6 +2136,13 @@
                                         numGbgpPeersPerDut=numGbgpPeersPerDut )
    dut = t.deviceList()[ 0 ]
 
+   yumOut = Tac.run( [ 'a4', 'yum', 'install', '-y', 'ArBgp-debuginfo' ], 
+                     stdout=Tac.CAPTURE )

^^^^ VPS: the above fails. So do manual step:
   # a4 yum install -y --enablerepo=* EosKernel-perf EosKernel-debug
   # tacc-debuginfo gcc-debuginfo glibc-debuginfo FlameGraph EosExtras

+   t0( 'Installing debuginfo \n', yumOut )
+   #Perf.perfConfigure( dut )
+   t0( "Starting perf on %s" % dut )
+   Perf.perfStart( dut, "Bgp" )
+
    t0( "Setup mrtScaleHandler" )
    mrtScaleHandler = MrtScaleHandler( peers=gPeers, peerAsns=gPeerAsns,
                                       peerAddrs=gPeerAddrs, mrtFiles=mrtFiles,
@@ -2170,6 +2178,10 @@
       with Netns.RunInOuterNetworkNamespace():
          session.writeResult( delta, benchmarkName, desc, 'secs' )
 
+   Perf.perfStop( dut )
+   Perf.perfFlameGraph( '/tmp/perf/perf.data' )
+   Tac.pdb()
+
    if verifyMemInfoExport:
       gatedExportVerifier.verifyMemInfoExport()
 
